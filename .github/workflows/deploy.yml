name: Deploy to Digital Ocean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: statdevs-sales-intelligence
  DOCKER_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest test_*.py -v || echo "Tests completed with some failures"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image (NO CACHE)
      run: |
        # Remove any existing images
        docker image rm ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} || true
        docker image rm ${{ env.DOCKER_IMAGE_NAME }}:latest || true
        
        # Build with no cache to ensure fresh build
        docker build --no-cache --pull -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Save image as tar file for transfer
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} | gzip > ${{ env.DOCKER_IMAGE_NAME }}.tar.gz
    
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        source: "."
        target: "/opt/statdevs-sales-intelligence"
        strip_components: 1
        rm: true

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        script: |
          # Navigate to application directory
          cd /opt/statdevs-sales-intelligence
          
          # List files to debug
          echo "Files in directory:"
          ls -la
          
          # Stop and remove ALL containers
          if [ -d "deployment" ]; then
            cd deployment && docker-compose down -v --remove-orphans || true
            cd ..
          fi
          
          # Stop any running containers
          if [ $(docker ps -q | wc -l) -gt 0 ]; then
            docker stop $(docker ps -q) || true
            docker rm $(docker ps -aq) || true
          fi
          
          # Remove ALL images to force fresh load
          docker image rm ${{ env.DOCKER_IMAGE_NAME }}:latest || true
          docker system prune -af || true
          
          # Load the fresh pre-built image if it exists
          if [ -f "${{ env.DOCKER_IMAGE_NAME }}.tar.gz" ]; then
            docker load < ${{ env.DOCKER_IMAGE_NAME }}.tar.gz
          else
            echo "Docker image file not found, building from source..."
            docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          fi
          
          # Export environment variables for Docker Compose
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          export TAVILY_API_KEY="${{ secrets.TAVILY_API_KEY }}"
          export OPENAI_TRACE=1
          export PYTHONPATH=/app
          
          # Create logs and uploads directories
          mkdir -p logs uploads
          
          # Start the application using pre-built image
          if [ -d "deployment" ]; then
            cd deployment && docker-compose up -d
          else
            echo "Deployment directory not found, running directly..."
            docker run -d --name statdevs-sales-ai-v2 \
              -p 8000:8000 \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -e TAVILY_API_KEY="${{ secrets.TAVILY_API_KEY }}" \
              -e OPENAI_TRACE=1 \
              -e PYTHONPATH=/app \
              -v $(pwd)/logs:/app/logs \
              -v $(pwd)/uploads:/app/uploads \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
          fi
          
          # Wait for the application to be ready
          sleep 30
          
          # Check if the application is running
          if curl -f http://localhost:8000/health; then
            echo "✅ Application deployed successfully!"
            echo "🌐 Application is running at: http://143.110.183.47:8000"
          else
            echo "❌ Application deployment failed!"
            docker-compose logs
            exit 1
          fi
          
          # Setup nginx reverse proxy (optional)
          cat > /etc/nginx/sites-available/statdevs-sales << 'EOF'
          server {
              listen 80;
              server_name 143.110.183.47;
              
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/statdevs-sales /etc/nginx/sites-enabled/
          nginx -t && systemctl reload nginx || echo "Nginx configuration failed, but app is running on port 8000"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "🌐 Your app is available at: http://143.110.183.47:8000"
        else
          echo "❌ Deployment failed!"
        fi


