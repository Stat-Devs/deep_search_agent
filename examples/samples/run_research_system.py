#!/usr/bin/env python3
"""
Deep Research System - Lead Research Coordinator
Integrates all research agents to provide comprehensive lead intelligence.
"""

import os
from dotenv import load_dotenv, find_dotenv
from deep_research_system import research_lead
from research_agent_website import research_company_website
from research_agent_linkedin import research_linkedin_profile
from research_agent_email import generate_email_pitch

def main():
    """Main function to run the complete lead research system."""
    
    print("🚀 Deep Research System - Lead Intelligence Platform")
    print("=" * 60)
    
    # Get lead information from user
    print("\n📋 Please provide lead information:")
    company_name = input("Company Name: ").strip()
    person_name = input("Person Name: ").strip()
    website_url = input("Website URL (optional): ").strip()
    linkedin_profile = input("LinkedIn Profile Data (optional): ").strip()
    
    if not company_name or not person_name:
        print("❌ Company name and person name are required!")
        return
    
    print(f"\n🔍 Starting comprehensive research for {person_name} at {company_name}")
    print("-" * 60)
    
    try:
        # Step 1: Website Research
        print("\n1️⃣ Researching company website...")
        website_research = research_company_website(company_name, website_url if website_url else "Not provided")
        print("✅ Website research completed")
        
        # Step 2: LinkedIn Research
        print("\n2️⃣ Researching LinkedIn profile...")
        linkedin_research = research_linkedin_profile(person_name, company_name, linkedin_profile)
        print("✅ LinkedIn research completed")
        
        # Step 3: Generate Email Pitch
        print("\n3️⃣ Generating personalized email pitch...")
        # Extract person's role from LinkedIn research
        person_role = "Professional"  # Default
        if "Data Analyst" in linkedin_research:
            person_role = "Data Analyst"
        elif "Data Scientist" in linkedin_research:
            person_role = "Data Scientist"
        elif "Manager" in linkedin_research:
            person_role = "Manager"
        elif "Director" in linkedin_research:
            person_role = "Director"
        elif "CEO" in linkedin_research or "Founder" in linkedin_research:
            person_role = "Executive"
        
        email_pitch = generate_email_pitch(
            person_name, 
            company_name, 
            person_role,
            website_research,
            linkedin_research
        )
        print("✅ Email pitch generated")
        
        # Step 4: Compile Final Report
        print("\n4️⃣ Compiling comprehensive research report...")
        final_report = f"""
# 🎯 LEAD RESEARCH REPORT: {company_name.upper()}

## 📊 Company Intelligence
{website_research}

## 👤 Contact Person: {person_name}
**Role:** {person_role}
{linkedin_research}

## 📧 Personalized Email Pitch
{email_pitch}

## 🚀 Next Steps
1. **Review and customize** the email pitch
2. **Send the email** to {person_name}
3. **Follow up** within 3-5 business days
4. **Prepare for discovery call** with specific case studies

## 💡 Key Insights
- Company appears to be a good fit for data analytics services
- {person_name} has decision-making influence in the organization
- Personalized approach based on company needs and person's role
- Focus on value proposition and business outcomes

---
*Report generated by Deep Research System - {os.path.basename(__file__)}*
"""
        
        print("✅ Research report compiled")
        
        # Display results
        print("\n" + "=" * 60)
        print("📋 COMPLETE RESEARCH REPORT")
        print("=" * 60)
        print(final_report)
        
        # Save report to file
        filename = f"lead_research_{company_name.replace(' ', '_')}_{person_name.replace(' ', '_')}.md"
        with open(filename, 'w') as f:
            f.write(final_report)
        
        print(f"\n💾 Research report saved to: {filename}")
        
    except Exception as e:
        print(f"❌ Error during research: {str(e)}")
        print("Please check your API keys and try again.")

def quick_research():
    """Quick research function for testing with sample data."""
    print("🧪 Quick Research Mode - Using Sample Data")
    print("-" * 40)
    
    sample_company = "TechCorp Inc."
    sample_person = "John Smith"
    sample_website = "https://techcorp.com"
    
    print(f"Company: {sample_company}")
    print(f"Person: {sample_person}")
    print(f"Website: {sample_website}")
    
    try:
        # Run research
        result = research_lead(sample_company, sample_person, sample_website)
        
        print("\n" + "=" * 60)
        print("📋 RESEARCH RESULTS")
        print("=" * 60)
        print(result)
        
    except Exception as e:
        print(f"❌ Error: {str(e)}")

if __name__ == "__main__":
    print("Choose research mode:")
    print("1. Full Research (interactive)")
    print("2. Quick Research (sample data)")
    
    choice = input("\nEnter choice (1 or 2): ").strip()
    
    if choice == "1":
        main()
    elif choice == "2":
        quick_research()
    else:
        print("Invalid choice. Running quick research...")
        quick_research()
